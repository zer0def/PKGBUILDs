diff --git a/qtwebengine/src/core/config/linux.pri b/qtwebengine/src/core/config/linux.pri
--- a/qtwebengine/src/core/config/linux.pri
+++ b/qtwebengine/src/core/config/linux.pri
@@ -19,7 +19,8 @@ gn_args += \
     is_cfi=false \
     toolkit_views=false \
     use_ozone=true \
+    use_x11=false \
     ozone_auto_platforms=false \
     ozone_platform_headless=false \
     ozone_platform_external=true \

From ac7ecedc9d8538d595b6f11d141bf128ecc9aefb Mon Sep 17 00:00:00 2001
From: Jimi Huotari <chiitoo@gentoo.org>
Date: Tue, 5 May 2020 07:50:18 +0300
Subject: [PATCH] Fix build with GCC 10

Change-Id: I4101211163f3bb3f9a5fa673169aa41fa000ccca
Reviewed-by: Allan Sandfeld Jensen <allan.jensen@qt.io>
---
 qtwebengine/src/3rdparty/chromium/media/cdm/supported_cdm_versions.h                                       | 1 +
 qtwebengine/src/3rdparty/chromium/third_party/perfetto/include/perfetto/base/task_runner.h                 | 1 +
 qtwebengine/src/3rdparty/chromium/third_party/webrtc/call/rtx_receive_stream.h                             | 1 +
 qtwebengine/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/aec3/clockdrift_detector.h   | 1 +
 4 files changed, 4 insertions(+)

diff --git a/qtwebengine/src/3rdparty/chromium/media/cdm/supported_cdm_versions.h b/qtwebengine/src/3rdparty/chromium/media/cdm/supported_cdm_versions.h
index 25bb6ed3f33..8a328210beb 100644
--- a/qtwebengine/src/3rdparty/chromium/media/cdm/supported_cdm_versions.h
+++ b/qtwebengine/src/3rdparty/chromium/media/cdm/supported_cdm_versions.h
@@ -8,6 +8,7 @@
 #include <stddef.h>
 
 #include <array>
+#include <cstddef>
 
 #include "media/base/media_export.h"
 #include "media/cdm/api/content_decryption_module.h"
diff --git a/qtwebengine/src/3rdparty/chromium/third_party/perfetto/include/perfetto/base/task_runner.h b/qtwebengine/src/3rdparty/chromium/third_party/perfetto/include/perfetto/base/task_runner.h
index 4f64bf858d2..05af57f7150 100644
--- a/qtwebengine/src/3rdparty/chromium/third_party/perfetto/include/perfetto/base/task_runner.h
+++ b/qtwebengine/src/3rdparty/chromium/third_party/perfetto/include/perfetto/base/task_runner.h
@@ -20,6 +20,7 @@
 #include <stdint.h>
 
 #include <functional>
+#include <stdint.h>
 
 #include "perfetto/base/export.h"
 #include "perfetto/base/platform_handle.h"
diff --git a/qtwebengine/src/3rdparty/chromium/third_party/webrtc/call/rtx_receive_stream.h b/qtwebengine/src/3rdparty/chromium/third_party/webrtc/call/rtx_receive_stream.h
index a389fc2a574..e8cadb2bb80 100644
--- a/qtwebengine/src/3rdparty/chromium/third_party/webrtc/call/rtx_receive_stream.h
+++ b/qtwebengine/src/3rdparty/chromium/third_party/webrtc/call/rtx_receive_stream.h
@@ -13,6 +13,7 @@
 
 #include <cstdint>
 #include <map>
+#include <stdint.h>
 
 #include "call/rtp_packet_sink_interface.h"
 
From 7ac85fb4cc6f44a21761a591ac497ae3d6bf966d Mon Sep 17 00:00:00 2001
From: Allan Sandfeld Jensen <allan.jensen@qt.io>
Date: Mon, 23 Sep 2019 13:49:53 +0200
Subject: [PATCH] Fix building with pulseaudio 13
MIME-Version: 1.0
Content-Type: text/plain; charset=utf8
Content-Transfer-Encoding: 8bit

The function signature changed though the ABI stayed the same.

Change-Id: I86ca361b5e4f0c523e1031910df438c23beee876
Fixes: QTBUG-77037
Reviewed-by: JÃ¼ri Valdmann <juri.valdmann@qt.io>
---
 qtwebengine/src/3rdparty/chromium/media/audio/pulse/pulse.sigs                 | 16 ++++++++--------
 qtwebengine/src/3rdparty/chromium/media/audio/pulse/pulse_stub_header.fragment | 11 +++++++++++
 2 files changed, 19 insertions(+), 8 deletions(-)

diff --git a/qtwebengine/src/3rdparty/chromium/media/audio/pulse/pulse.sigs b/qtwebengine/src/3rdparty/chromium/media/audio/pulse/pulse.sigs
index 8b5888786a9..daaeb149c13 100644
--- a/qtwebengine/src/3rdparty/chromium/media/audio/pulse/pulse.sigs
+++ b/qtwebengine/src/3rdparty/chromium/media/audio/pulse/pulse.sigs
@@ -24,11 +24,11 @@ pa_operation* pa_context_get_source_info_by_index(pa_context* c, uint32_t idx, p
 pa_operation* pa_context_get_source_info_by_name(pa_context* c, const char* name, pa_source_info_cb_t cb, void *userdata);
 pa_operation* pa_context_get_source_info_list(pa_context* c, pa_source_info_cb_t cb, void* userdata);
 pa_operation* pa_context_get_sink_info_list(pa_context* c, pa_sink_info_cb_t cb, void* userdata);
-pa_context_state_t pa_context_get_state(pa_context* c);
+pa_context_state_t pa_context_get_state(const_pa_context_ptr c);
 pa_context* pa_context_new(pa_mainloop_api* mainloop, const char* name);
 pa_operation* pa_context_set_source_volume_by_index(pa_context* c, uint32_t idx, const pa_cvolume* volume, pa_context_success_cb_t cb, void* userdata);
 void pa_context_set_state_callback(pa_context* c, pa_context_notify_cb_t cb, void* userdata);
-pa_operation_state_t pa_operation_get_state(pa_operation* o);
+pa_operation_state_t pa_operation_get_state(const_pa_operation_ptr o);
 void pa_context_unref(pa_context* c);
 void pa_operation_unref(pa_operation* o);
 int pa_stream_begin_write(pa_stream* p, void** data, size_t* nbytes);
@@ -38,23 +38,23 @@ pa_operation* pa_stream_cork(pa_stream* s, int b, pa_stream_success_cb_t cb, voi
 int pa_stream_disconnect(pa_stream* s);
 int pa_stream_drop(pa_stream *p);
 pa_operation* pa_stream_flush(pa_stream* s, pa_stream_success_cb_t cb, void* userdata);
-uint32_t pa_stream_get_device_index(pa_stream* s);
+uint32_t pa_stream_get_device_index(const_pa_stream_ptr s);
 int pa_stream_get_latency(pa_stream* s, pa_usec_t* r_usec, int* negative);
-pa_stream_state_t pa_stream_get_state(pa_stream* p);
+pa_stream_state_t pa_stream_get_state(const_pa_stream_ptr p);
 pa_stream* pa_stream_new(pa_context*  c, const char*  name, const pa_sample_spec*  ss, const pa_channel_map *  map);
 pa_stream* pa_stream_new_with_proplist(pa_context* c, const char* name, const pa_sample_spec* ss, const pa_channel_map* map, pa_proplist* p);
 pa_proplist* pa_proplist_new(void);
-int pa_proplist_contains(pa_proplist* p, const char* key);
+int pa_proplist_contains(const_pa_proplist_ptr p, const char* key);
 void pa_proplist_free(pa_proplist* p);
-const char* pa_proplist_gets(pa_proplist* p, const char* key);
+const char* pa_proplist_gets(const_pa_proplist_ptr p, const char* key);
 int pa_proplist_sets(pa_proplist* p, const char* key, const char* value);
-size_t pa_stream_readable_size(pa_stream *p);
+size_t pa_stream_readable_size(const_pa_stream_ptr p);
 int pa_stream_peek(pa_stream* p, const void** data, size_t* nbytes);
 void pa_stream_set_read_callback(pa_stream* p, pa_stream_request_cb_t cb, void* userdata);
 void pa_stream_set_state_callback(pa_stream* s, pa_stream_notify_cb_t cb, void* userdata);
 int pa_stream_write(pa_stream* p, const void* data, size_t nbytes, pa_free_cb_t free_cb, int64_t offset, pa_seek_mode_t seek);
 void pa_stream_set_write_callback(pa_stream *p, pa_stream_request_cb_t cb, void *userdata);
 void pa_stream_unref(pa_stream* s);
-int pa_context_errno(pa_context *c);
+int pa_context_errno(const_pa_context_ptr c);
 const char* pa_strerror(int error);
 pa_cvolume* pa_cvolume_set(pa_cvolume* a, unsigned  channels, pa_volume_t v);
diff --git a/qtwebengine/src/3rdparty/chromium/media/audio/pulse/pulse_stub_header.fragment b/qtwebengine/src/3rdparty/chromium/media/audio/pulse/pulse_stub_header.fragment
index 2a2d3e7552b..cdaa841b29f 100644
--- a/qtwebengine/src/3rdparty/chromium/media/audio/pulse/pulse_stub_header.fragment
+++ b/qtwebengine/src/3rdparty/chromium/media/audio/pulse/pulse_stub_header.fragment
@@ -5,4 +5,15 @@ extern "C" {
 
 #include <pulse/pulseaudio.h>
 
+#if PA_MAJOR > 12
+typedef const pa_context* const_pa_context_ptr;
+typedef const pa_operation* const_pa_operation_ptr;
+typedef const pa_proplist* const_pa_proplist_ptr;
+typedef const pa_stream* const_pa_stream_ptr;
+#else
+typedef pa_context* const_pa_context_ptr;
+typedef pa_operation* const_pa_operation_ptr;
+typedef pa_proplist* const_pa_proplist_ptr;
+typedef pa_stream* const_pa_stream_ptr;
+#endif
 }
-- 
2.16.3

From 1a53f5995697f5ac6fd501dbdc0ee39c9488ee66 Mon Sep 17 00:00:00 2001
From: Allan Sandfeld Jensen <allan.jensen@qt.io>
Date: Fri, 14 Aug 2020 16:38:48 +0200
Subject: Fix bison 3.7
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Do a replace run inspired by newer versions of the script.

Fixes: QTBUG-86018
Change-Id: Ib1dc771e22a662aff0fae842d135ad58fad08bc1
Reviewed-by: Michael Brüning <michael.bruning@qt.io>
---
 .../blink/renderer/build/scripts/rule_bison.py        | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/chromium/third_party/blink/renderer/build/scripts/rule_bison.py b/chromium/third_party/blink/renderer/build/scripts/rule_bison.py
index f75e25fd23f..7e0767e951a 100755
--- a/qtwebengine/src/3rdparty/chromium/third_party/blink/renderer/build/scripts/rule_bison.py
+++ b/qtwebengine/src/3rdparty/chromium/third_party/blink/renderer/build/scripts/rule_bison.py
@@ -45,6 +45,19 @@ from utilities import abs
 
 from blinkbuild.name_style_converter import NameStyleConverter
 
+def modify_file(path, prefix_lines, suffix_lines, replace_list=[]):
+    prefix_lines = map(lambda s: s + '\n', prefix_lines)
+    suffix_lines = map(lambda s: s + '\n', suffix_lines)
+    with open(path, 'r') as f:
+        old_lines = f.readlines()
+    for i in range(len(old_lines)):
+        for src, dest in replace_list:
+            old_lines[i] = old_lines[i].replace(src, dest)
+    new_lines = prefix_lines + old_lines + suffix_lines
+    with open(path, 'w') as f:
+        f.writelines(new_lines)
+
+
 assert len(sys.argv) == 4 or len(sys.argv) == 5
 
 inputFile = abs(sys.argv[1])
@@ -115,3 +128,9 @@ print >>outputHFile, '#define %s' % headerGuard
 print >>outputHFile, outputHContents
 print >>outputHFile, '#endif  // %s' % headerGuard
 outputHFile.close()
+
+common_replace_list = [(inputRoot + '.hh',
+                        inputRoot + '.h')]
+modify_file(
+    outputCpp, [], [],
+    replace_list=common_replace_list)
-- 
cgit v1.2.1
